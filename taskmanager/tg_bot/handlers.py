import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async
from tasks.models import TelegramProfile
from .settings import FRONTEND_URL

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
@sync_to_async
def is_linked(chat_id: int) -> bool:
    return TelegramProfile.objects.filter(chat_id=chat_id, user__isnull=False).exists()

@sync_to_async
def create_temp_token(chat_id: int) -> str:
    from django.utils.crypto import get_random_string
    token = get_random_string(16)
    profile, _ = TelegramProfile.objects.get_or_create(chat_id=chat_id)
    profile.temp_token = token
    profile.save()
    return token

@sync_to_async
def unlink_profile(chat_id: int):
    TelegramProfile.objects.filter(chat_id=chat_id).update(user=None)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    linked = await is_linked(chat_id)

    await update.message.reply_text("üëã –í—ñ—Ç–∞—î–º–æ —É Telegram-–±–æ—Ç—ñ Taskino!")

    if linked:
        keyboard = [[InlineKeyboardButton("‚ùå –í—ñ–¥–≤'—è–∑–∞—Ç–∏ Telegram", callback_data="unlink")]]
    else:
        token = await create_temp_token(chat_id)
        link = f"{FRONTEND_URL}/telegram/confirm?token={token}&chat_id={chat_id}"
        keyboard = [[InlineKeyboardButton("üîó –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ Telegram", url=link)]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "unlink":
        chat_id = query.message.chat.id
        await unlink_profile(chat_id)
        await query.edit_message_text("‚úÖ Telegram —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–≤'—è–∑–∞–Ω–æ.\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –ø—Ä–∏–≤'—è–∑–∫–∏.")
